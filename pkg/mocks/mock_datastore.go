// Code generated by MockGen. DO NOT EDIT.
// Source: cellar/pkg/datastore (interfaces: DataStore)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_datastore.go -package=mocks . DataStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "cellar/pkg/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
	isgomock struct{}
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// DeleteSecret mocks base method.
func (m *MockDataStore) DeleteSecret(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockDataStoreMockRecorder) DeleteSecret(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockDataStore)(nil).DeleteSecret), id)
}

// Health mocks base method.
func (m *MockDataStore) Health() models.Health {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(models.Health)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockDataStoreMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockDataStore)(nil).Health))
}

// IncreaseAccessCount mocks base method.
func (m *MockDataStore) IncreaseAccessCount(id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseAccessCount", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseAccessCount indicates an expected call of IncreaseAccessCount.
func (mr *MockDataStoreMockRecorder) IncreaseAccessCount(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseAccessCount", reflect.TypeOf((*MockDataStore)(nil).IncreaseAccessCount), id)
}

// ReadSecret mocks base method.
func (m *MockDataStore) ReadSecret(id string) *models.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecret", id)
	ret0, _ := ret[0].(*models.Secret)
	return ret0
}

// ReadSecret indicates an expected call of ReadSecret.
func (mr *MockDataStoreMockRecorder) ReadSecret(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecret", reflect.TypeOf((*MockDataStore)(nil).ReadSecret), id)
}

// WriteSecret mocks base method.
func (m *MockDataStore) WriteSecret(secret models.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSecret", secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSecret indicates an expected call of WriteSecret.
func (mr *MockDataStoreMockRecorder) WriteSecret(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSecret", reflect.TypeOf((*MockDataStore)(nil).WriteSecret), secret)
}
