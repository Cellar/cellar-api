// Code generated by MockGen. DO NOT EDIT.
// Source: cellar/pkg/datastore (interfaces: DataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "cellar/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// DeleteSecret mocks base method
func (m *MockDataStore) DeleteSecret(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MockDataStoreMockRecorder) DeleteSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockDataStore)(nil).DeleteSecret), arg0)
}

// Health mocks base method
func (m *MockDataStore) Health() models.Health {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(models.Health)
	return ret0
}

// Health indicates an expected call of Health
func (mr *MockDataStoreMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockDataStore)(nil).Health))
}

// IncreaseAccessCount mocks base method
func (m *MockDataStore) IncreaseAccessCount(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseAccessCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseAccessCount indicates an expected call of IncreaseAccessCount
func (mr *MockDataStoreMockRecorder) IncreaseAccessCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseAccessCount", reflect.TypeOf((*MockDataStore)(nil).IncreaseAccessCount), arg0)
}

// ReadSecret mocks base method
func (m *MockDataStore) ReadSecret(arg0 string) *models.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecret", arg0)
	ret0, _ := ret[0].(*models.Secret)
	return ret0
}

// ReadSecret indicates an expected call of ReadSecret
func (mr *MockDataStoreMockRecorder) ReadSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecret", reflect.TypeOf((*MockDataStore)(nil).ReadSecret), arg0)
}

// WriteSecret mocks base method
func (m *MockDataStore) WriteSecret(arg0 models.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSecret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSecret indicates an expected call of WriteSecret
func (mr *MockDataStoreMockRecorder) WriteSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSecret", reflect.TypeOf((*MockDataStore)(nil).WriteSecret), arg0)
}
