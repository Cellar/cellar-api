stages:
  - build
  - test
  - publish
  - release

variables:
  APP_NAME: cellar-api
  APP_VERSION: 3.1.0
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  PACKAGE_REGISTRY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic

.api:
  image: golang:1.23-bookworm
  cache:
    key:
      files:
        - cellar/go.mod
        - cellar/go.sum
      prefix: ${CI_PIPELINE_IID}
    paths:
      - /go
  tags:
    - gitlab-org-docker

.docker:
  image: docker:stable
  services:
    - name: docker:dind
      alias: docker

  before_script:
    - apk add --no-cache make
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - make docker-build IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${APP_VERSION}
  after_script:
    - docker logout $CI_REGISTRY

build-binary:
  extends: .api
  stage: build
  script:
    - make build

build-docker:
  extends: .docker
  stage: build
  script:
    - make docker-build APP_VERSION=${APP_VERSION} IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${APP_VERSION}

test-unit:
  extends: .api
  stage: test
  script:
    - make test-unit

.api-test-depends:
  extends: .api
  variables:
    # SERVICES AND MAKEFILE SETTINGS
    REDIS_HOST: "redis"
    REDIS_PORT: 6379
    VAULT_DEV_ROOT_TOKEN_ID: vault-admin
    VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    VAULT_LOCAL_ADDR: http://vault:8200
    VAULT_ROOT_TOKEN: vault-admin
    VAULT_ENCRYPTION_TOKEN_NAME: cellar-testing
    # APP SETTINGS
    DATASTORE_REDIS_HOST: "redis"
    DATASTORE_REDIS_PORT: 6379
    CRYPTOGRAPHY_VAULT_ENABLED: true
    CRYPTOGRAPHY_VAULT_AUTH_MOUNT_PATH: approle
    CRYPTOGRAPHY_VAULT_ADDRESS: http://vault:8200
    CRYPTOGRAPHY_VAULT_ENCRYPTION_TOKEN_NAME: cellar-testing
  services:
    - name: redis:6.0-alpine
      alias: redis
    - name: vault:1.5.5
      alias: vault
  before_script:
    - apt-get update && apt-get install -y jq
    - make vault-configure
    - export CRYPTOGRAPHY_VAULT_AUTH_APPROLE_ROLE_ID=$(make vault-role-id)
    - export CRYPTOGRAPHY_VAULT_AUTH_APPROLE_SECRET_ID=$(make vault-secret-id)

test-integration:
  extends: .api-test-depends
  stage: test
  script:
    - make test-integration

test-acceptance:
  extends: .api-test-depends
  stage: test
  script:
    - make run-daemon
    - make test-acceptance
  after_script:
    - make stop-daemon

pages:
  stage: publish
  image: node:alpine
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  before_script:
    - apk add --no-cache make
  script:
    - make redoc
      APP_VERSION=${APP_VERSION}
      REDOC_FILE=public/index.html
  artifacts:
    paths:
      - public

publish-binary:
  extends: .api
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  script:
    - make publish
      APP_VERSION=${APP_VERSION}
      PACKAGE_ARCH=linux-amd64
      PACKAGE_NAME=${APP_NAME}
      PACKAGE_REGISTRY_URL=${PACKAGE_REGISTRY_URL}
      PACKAGE_TOKEN=${CI_JOB_TOKEN}
  artifacts:
    name: cellar-api-${APP_VERSION}
    paths:
      - cellar-api

publish-docker:
  extends: .docker
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  script:
    - make docker-publish APP_VERSION=${APP_VERSION} IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${APP_VERSION}
    - make docker-publish APP_VERSION=${APP_VERSION} IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=latest

release:
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: publish-binary
      artifacts: true
    - job: pages
      artifacts: true
    - job: publish-docker
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - apk add --no-cache make
  script:
    - make release
      APP_VERSION=${APP_VERSION}
      IMAGE_NAME=${IMAGE_NAME}
      IMAGE_TAG=${APP_VERSION}
      PACKAGE_ARCH=linux-amd64
      PACKAGE_NAME=${APP_NAME}
      PACKAGE_REGISTRY_URL=${PACKAGE_REGISTRY_URL}
